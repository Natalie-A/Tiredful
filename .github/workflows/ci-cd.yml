name: Tiredful

on:
  push:
    branches:                                
      - main

jobs:
  oast-safety:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - run: docker run --rm -v $(pwd):/src hysnsec/safety check -r requirements.txt --json > safety-results.json
        continue-on-error: true             

      - uses: actions/upload-artifact@v4
        with:
          name: Safety
          path: safety-results.json
        if: always()

  sast-snyk:
    runs-on: ubuntu-22.04
    needs: oast-safety
    steps:
      - uses: actions/checkout@master
      - uses: snyk/actions/setup@master
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Python modules
        run: pip install -r requirements.txt

      - name: Run Snyk
        run: snyk code test --json-file-output=snyk-results.json --severity-threshold=high
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true    

      - uses: actions/upload-artifact@v4
        with:
          name: Snyk
          path: snyk-results.json
        if: always()

  sast-hadolint:
    runs-on: ubuntu-22.04
    needs: sast-snyk
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Hadolint
        uses: hadolint/hadolint-action@v3.1.0        
        with:
          dockerfile: Dockerfile
          failure-threshold: warning
          format: json
          output-file: hadolint.json
        continue-on-error: true

      - uses: actions/upload-artifact@v4
        with:
          name: Hadolint
          path: hadolint.json
        if: always()

  build:
    runs-on: ubuntu-22.04
    needs: sast-hadolint

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          docker build -t natalieaoya/tiredful:latest .
          docker push natalieaoya/tiredful:latest
  image-scan:
    runs-on: ubuntu-22.04
    needs: build
    steps:
      - uses: actions/checkout@master
      - uses: snyk/actions/setup@master
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Python modules
        run: pip install -r requirements.txt

      - name: Run Snyk
        run: snyk test --docker natalieaoya/tiredful:latest --json-file-output=image-scan.json --severity-threshold=high
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true    

      - uses: actions/upload-artifact@v4
        with:
          name: Image Scan
          path: image-scan.json
        if: always()


  deploy:
    runs-on: ubuntu-22.04
    needs: image-scan

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to K0
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          echo "$EC2_SSH_KEY" > private_key && chmod 600 private_key

          scp -i private_key -o StrictHostKeyChecking=no -r deployment.yaml ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USER }}/deployment.yaml
          scp -i private_key -o StrictHostKeyChecking=no -r service.yaml ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USER }}/service.yaml

          ssh -o StrictHostKeyChecking=no -i private_key ${EC2_USER}@${EC2_HOST} '
          kubectl apply -f /home/$EC2_USER/deployment.yaml
          kubectl apply -f /home/$EC2_USER/service.yaml '
